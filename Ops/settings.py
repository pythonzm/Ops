"""
Django settings for Ops project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys
try:
    import ConfigParser as conf
except ImportError as e:
    import configparser as conf

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
config = conf.ConfigParser()
config.read(os.path.join(BASE_DIR, 'conf/ops.ini'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'e02$n$tpsi&rvjj7=5y!pi7b2$ku-+@5+6%#va7=oypuglxkn#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.get('global', 'debug')

ALLOWED_HOSTS = ['*']

ASGI_APPLICATION = "Ops.routing.application"

# channel配置
CHANNEL_LAYERS = {
    "default": {
        # This example app uses the Redis channel layer implementation channels_redis
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(config.get('redis', 'host'), config.get('redis', 'port'))],
        },
    },
}

# celery配置
CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'pickle'
CELERY_ACCEPT_CONTENT = ['pickle', 'json']
CELERYD_MAX_TASKS_PER_CHILD = 40
CELERY_TRACK_STARTED = True

CELERY_ROUTES = {
    'users.tasks.*': {'queue': 'default', 'routing_key': 'default'},
    'assets.tasks.*': {'queue': 'default', 'routing_key': 'default'},
    'task.tasks.*': {'queue': 'ansible', 'routing_key': 'ansible'},
    'fort.tasks.*': {'queue': 'fort', 'routing_key': 'fort'},
    'commons.tasks.*': {'queue': 'commons', 'routing_key': 'commons'},
}

# 执行ansible命令使用的redis信息
REDIS_HOST = config.get('redis', 'host')
REDIS_PORT = config.get('redis', 'port')
REDIS_DB = config.get('redis', 'ansible_db')
REDIS_PASSWORD = config.get('redis', 'password')

# mongodb配置信息
MONGODB_HOST = config.get('mongodb', 'host')
MONGODB_PORT = config.getint('mongodb', 'port')
MONGODB_USER = config.get('mongodb', 'user')
MONGODB_PASS = config.get('mongodb', 'password')
RECORD_DB = config.get('mongodb', 'record_db')
RECORD_COLL = config.get('mongodb', 'record_coll')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_celery_beat',
    'django_celery_results',
    'api.apps.ApiConfig',
    'channels',
    'assets.apps.AssetsConfig',
    'users.apps.UsersConfig',
    'task.apps.TaskConfig',
    'fort.apps.FortConfig',
    'projs.apps.ProjsConfig',
    'plan.apps.PlanConfig',
    'wiki.apps.WikiConfig',
    'haystack.apps.HaystackConfig',
    'dbmanager.apps.DbmanagerConfig',
    'commons.apps.CommonsConfig',
]

# 全局搜索配置
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'wiki.whoosh_cn_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'wiki', 'whoosh_index'),
    }
}
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
#         'LOCATION': '/var/tmp/django_cache',
#     }
# }
#
# CACHE_MIDDLEWARE_KEY_PREFIX = ''
# CACHE_MIDDLEWARE_SECONDS = 30
# CACHE_MIDDLEWARE_ALIAS = 'default'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.middleware.UserLoginMiddleware',
    'utils.middleware.RecordMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAdminUser',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

ROOT_URLCONF = 'Ops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Ops.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config.get('db', 'name'),
        'USER': config.get('db', 'user'),
        'PASSWORD': config.get('db', 'password'),
        'HOST': config.get('db', 'host'),
        'PORT': config.get('db', 'port'),
        'OPTIONS':{
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.UserProfile'

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

LOGIN_URL = '/login/'

TIME_FORMAT = '%Y-%m-%d %X'

# zabbix配置
ZABBIX_INFO = {
    'api_url': 'http://{host}:{port}/{api_url}'.format(host=config.get('zabbix', 'host'), port=config.get('zabbix', 'port'), api_url=config.get('zabbix', 'api_url')),
    'graph_url': 'http://{host}:{port}/{graph_url}'.format(host=config.get('zabbix', 'host'), port=config.get('zabbix', 'port'), graph_url=config.get('zabbix', 'graph_url')),
    'login_url': 'http://{host}:{port}/{login_url}'.format(host=config.get('zabbix', 'host'), port=config.get('zabbix', 'port'), login_url=config.get('zabbix', 'login_url')),
    'username': '{username}'.format(username=config.get('zabbix', 'username')),
    'password': '{password}'.format(password=config.get('zabbix', 'password'))
}

# ANSIBLE_ROLE_PATH = os.path.join(MEDIA_ROOT, 'roles')
ANSIBLE_ROLE_PATH = config.get('ansible', 'ansible_role_path')

GUACD_HOST = config.get('cuacd', 'host')
GUACD_PORT = config.get('cuacd', 'port')

# email配置
EMAIL_HOST = config.get('email', 'smtp_host')
EMAIL_PORT = config.get('email', 'smtp_port')
EMAIL_HOST_USER = config.get('email', 'smtp_user')
EMAIL_HOST_PASSWORD = config.get('email', 'smtp_passwd')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# 数据库管理用户,该用户需要有grant option权限,并且只能赋予该用户所拥有的权限
MYSQL_USER = config.get('db', 'admin_user')
MYSQL_PASS = config.get('db', 'admin_password')
